// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  subscription  Subscription?
  products      Product[]
  mediaItems    Media[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model SubscriptionTier {
  id            String         @id @default(cuid())
  name          String
  description   String
  price         Float
  features      String[]
  creditsPerMonth Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subscriptions Subscription[]
}

model Subscription {
  id               String             @id @default(cuid())
  userId           String             @unique
  tierId           String
  status           SubscriptionStatus @default(ACTIVE)
  startDate        DateTime           @default(now())
  endDate          DateTime?
  remainingCredits Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier             SubscriptionTier   @relation(fields: [tierId], references: [id])
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  EXPIRED
}

model Product {
  id           String   @id @default(cuid())
  name         String
  description  String?
  price        Float
  userId       String
  mediaItems   Media[]
  thumbnailUrl String?
  status       ProductStatus @default(DRAFT)
  category     String?
  tags         String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProductStatus {
  DRAFT
  PUBLISHED
  SOLD
  ARCHIVED
}

model Media {
  id          String   @id @default(cuid())
  url         String
  name        String
  size        Int
  type        String
  productId   String?
  userId      String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  product     Product? @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
